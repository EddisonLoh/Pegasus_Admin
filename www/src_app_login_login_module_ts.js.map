{"version":3,"file":"src_app_login_login_module_ts.js","mappings":"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","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.ts","./src/app/login/login.page.html","./src/app/services/platform.service.ts","./node_modules/@capacitor/splash-screen/dist/esm/definitions.js","./node_modules/@capacitor/splash-screen/dist/esm/index.js"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LoginPageRoutingModule } from './login-routing.module';\r\n\r\nimport { LoginPage } from './login.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    LoginPageRoutingModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [LoginPage],\r\n})\r\nexport class LoginPageModule {}\r\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AlertController, ModalController, ModalOptions, NavController, Platform } from '@ionic/angular';\r\nimport { OtpComponent } from '../otp/otp.component';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { environment } from '../../environments/environment';\r\nimport { OverlayService } from '../services/overlay.service';\r\nimport { Auth, RecaptchaVerifier } from '@angular/fire/auth';\r\nimport { AvatarService } from '../services/avatar.service';\r\nimport { PlatformService } from '../services/platform.service';\r\nimport { CountrySearchModalComponent } from '../country-search-modal/country-search-modal.component';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage implements OnInit, AfterViewInit {\r\n  form: FormGroup;\r\n  CountryCode: string;\r\n  defaultCountryCode: string = '+1';\r\n  CountryJson = environment.CountryJson;\r\n  flag: any = \"https://cdn.kcak11.com/CountryFlags/countries/ng.svg\";\r\n  filteredCountries = [];\r\n  user: any;\r\n  approve: boolean;\r\n  approve2: boolean;\r\n  recaptchaVerifier: RecaptchaVerifier;\r\n\r\n  slideOpts = {\r\n    initialSlide: 0,\r\n    speed: 300,\r\n    autoplay: true\r\n  };\r\n\r\n  numberT: string;\r\n  backButtonSubscription: any;\r\n\r\n  maxPhoneLength: number = 10;\r\n\r\n  constructor(\r\n    private modalCtrl: ModalController,\r\n    private auth: AuthService,\r\n    private router: Router,\r\n    private nav: NavController,\r\n    private authY: Auth,\r\n    private avatar: AvatarService,\r\n    private overlay: OverlayService,\r\n    private alertController: AlertController,\r\n    private platform: Platform,\r\n    private platformService: PlatformService\r\n  ) {\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.form = new FormGroup({\r\n      phone: new FormControl(null, {\r\n        validators: [Validators.required, Validators.minLength(10), Validators.maxLength(10)]\r\n      }),\r\n    });\r\n\r\n    this.filteredCountries = this.CountryJson;\r\n    \r\n    // Detect country code before anything else\r\n    await this.detectCountry();\r\n\r\n    // Initialize ReCaptcha verifier\r\n    this.recaptchaVerifier = new RecaptchaVerifier('sign-in-button', {\r\n      'size': 'invisible',\r\n      'callback': (response) => {\r\n        this.signIn();\r\n      },\r\n      'expired-callback': () => {\r\n        // Response expired - handle expired reCAPTCHA\r\n      }\r\n    }, this.authY);\r\n    \r\n    this.initializeBackButtonCustomHandler();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Initialize RecaptchaVerifier after the view has been initialized\r\n    setTimeout(() => {\r\n      this.initializeRecaptcha();\r\n    }, 1000); // Delay of 1 second to ensure the DOM is ready\r\n  }\r\n\r\n  private initializeRecaptcha() {\r\n    const element = document.getElementById('sign-in-button');\r\n    if (element) {\r\n      try {\r\n        this.auth.recaptcha();\r\n      } catch (error) {\r\n        console.error('Error initializing reCAPTCHA:', error);\r\n      }\r\n    } else {\r\n      console.error('sign-in-button element not found');\r\n    }\r\n  }\r\n\r\n  async HideSplash() {\r\n    await this.platformService.hideSplashScreen();\r\n  }\r\n\r\n  async openCountrySearchModal() {\r\n    const modal = await this.modalCtrl.create({\r\n      component: CountrySearchModalComponent\r\n    });\r\n\r\n    await modal.present();\r\n\r\n    const { data } = await modal.onWillDismiss();\r\n    if (data) {\r\n      this.CountryCode = data.dialCode;\r\n      this.numberT = data.dialCode;\r\n    }\r\n  }\r\n\r\n  filterCountries(event: any) {\r\n    const searchTerm = event.target.value.toLowerCase();\r\n    this.filteredCountries = this.CountryJson.filter(country =>\r\n      country.name.toLowerCase().includes(searchTerm) ||\r\n      country.dialCode.includes(searchTerm)\r\n    );\r\n  }\r\n\r\n  countryCodeChange($event) {\r\n    this.CountryCode = '';\r\n    this.numberT = $event.detail.value.toString();\r\n  }\r\n\r\n  async Show() {\r\n    await this.platformService.setStatusBarOverlay(false);\r\n  }\r\n\r\n  async Hide() {\r\n    await this.platformService.setStatusBarOverlay(true);\r\n  }\r\n\r\n  async signIn() {\r\n      try {\r\n        if (!this.form.valid) {\r\n          this.form.markAllAsTouched();\r\n          return;\r\n        }\r\n        console.log('Form Value:', this.form.value);\r\n        this.overlay.showLoader('');\r\n  \r\n        const fullPhoneNumber = this.numberT + this.form.value.phone;\r\n        console.log('Attempting to sign in with phone number:', fullPhoneNumber);\r\n  \r\n        // Use AuthService to handle sign-in with phone number\r\n        const confirmationResult = await this.auth.signInWithPhoneNumber(fullPhoneNumber);\r\n  \r\n        console.log('Confirmation Result:', confirmationResult);\r\n        \r\n        let storedOTP = localStorage.getItem('defaultOTP');\r\n        if (!storedOTP){\r\n          storedOTP = '';\r\n        }\r\n\r\n        this.overlay.hideLoader();\r\n  \r\n        const options: ModalOptions = {\r\n          component: OtpComponent,\r\n          componentProps: {\r\n            defaultOtp: storedOTP,\r\n            phone: this.form.value.phone,\r\n            countryCode: this.numberT,\r\n            confirmationResult: confirmationResult\r\n          },\r\n          swipeToClose: true\r\n        };\r\n  \r\n        const modal = await this.modalCtrl.create(options);\r\n        await modal.present();\r\n        const data: any = await modal.onWillDismiss();\r\n        console.log('OTP Modal Dismissed:', data);\r\n  \r\n        this.authY.onAuthStateChanged(async (user) => {\r\n          if (user) {\r\n              console.log('User Profile Data:', data);\r\n              if (!user.email) {\r\n                console.log('Navigating to details page');\r\n                this.router.navigateByUrl('details');\r\n              } else {\r\n                console.log('Navigating to home page');\r\n                this.router.navigateByUrl('home');\r\n              }\r\n              this.approve2 = false;\r\n              this.overlay.hideLoader();\r\n          }\r\n        });\r\n      } catch (e) {\r\n        console.error('Error during signIn:', e);\r\n        this.approve2 = false;\r\n        \r\n        // Handle specific error cases\r\n        if (e.code === 'auth/invalid-app-credential' || e.code === 'auth/too-many-requests') {\r\n          this.CountryCode = '+57';\r\n          this.numberT = '+57';\r\n          const defaultNumbers = ['5006001000', '5006001000'];\r\n          const randomDefaultNumber = defaultNumbers[Math.floor(Math.random() * defaultNumbers.length)];\r\n          this.form.controls['phone'].setValue(randomDefaultNumber);\r\n          localStorage.setItem('defaultOTP', '123456');\r\n          this.overlay.showAlert('Daily SMS Limit Reached', `The daily SMS limit has been reached. Please use the default number +57:${randomDefaultNumber}`);\r\n        } else if (e.code === 'auth/invalid-phone-number') {\r\n          this.overlay.showAlert('Invalid Phone Number', 'Please enter a valid phone number.');\r\n        } else {\r\n          this.overlay.showAlert('Error', `Error during sign-in: ${e.message || JSON.stringify(e)}`);\r\n        }\r\n        \r\n        this.overlay.hideLoader();\r\n      }\r\n  }\r\n\r\n  initializeBackButtonCustomHandler() {\r\n    this.backButtonSubscription = this.platform.backButton.subscribeWithPriority(10, () => {\r\n      this.handleBackButton();\r\n    });\r\n  }\r\n\r\n  async handleBackButton() {\r\n    try {\r\n        await this.showExitConfirmation();\r\n    } catch (error) {\r\n      console.error('Error handling back button:', error);\r\n    }\r\n  }\r\n\r\n  async showExitConfirmation() {\r\n    const alert = await this.alertController.create({\r\n      header: 'Exit App',\r\n      message: 'Are you sure you want to exit the app?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Exit',\r\n          handler: () => {\r\n            navigator['app'].exitApp();\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    await alert.present();\r\n  }\r\n\r\n  async detectCountry() {\r\n    try {\r\n      // First try to get country from device/browser locale\r\n      const browserLocale = navigator.language;\r\n      const countryCode = browserLocale.split('-')[1] || browserLocale.split('_')[1];\r\n      \r\n      if (countryCode) {\r\n        // Find matching country in CountryJson\r\n        const country = this.CountryJson.find(c => c.isoCode === countryCode.toUpperCase());\r\n        if (country) {\r\n          this.CountryCode = country.dialCode;\r\n          this.numberT = country.dialCode;\r\n          this.maxPhoneLength = this.getPhoneMaxLength(countryCode);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Fallback to IP geolocation if browser locale doesn't work\r\n      const response = await fetch('https://ipapi.co/json/');\r\n      const data = await response.json();\r\n      \r\n      if (data && data.country_calling_code) {\r\n        this.CountryCode = data.country_calling_code.startsWith('+') ? \r\n          data.country_calling_code : \r\n          `+${data.country_calling_code}`;\r\n        this.numberT = this.CountryCode;\r\n        this.maxPhoneLength = this.getPhoneMaxLength(data.country_code);\r\n        \r\n        // Update form validation based on country\r\n        this.updatePhoneValidation();\r\n      } else {\r\n        throw new Error('Could not detect country from IP');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error detecting country:', error);\r\n      // Fallback to default country code\r\n      this.CountryCode = '+1';\r\n      this.numberT = '+1';\r\n      this.maxPhoneLength = 10;\r\n      this.updatePhoneValidation();\r\n    }\r\n  }\r\n\r\n  private updatePhoneValidation() {\r\n    this.form.get('phone').setValidators([\r\n      Validators.required,\r\n      Validators.minLength(this.maxPhoneLength),\r\n      Validators.maxLength(this.maxPhoneLength)\r\n    ]);\r\n    this.form.get('phone').updateValueAndValidity();\r\n  }\r\n\r\n  private getPhoneMaxLength(countryCode: string): number {\r\n    const phoneLengths = {\r\n      'US': 10, // United States\r\n      'GB': 10, // United Kingdom\r\n      'IN': 10, // India\r\n      'CA': 10, // Canada\r\n      'AU': 9,  // Australia\r\n      'DE': 11, // Germany\r\n      'FR': 9,  // France\r\n      'IT': 10, // Italy\r\n      'ES': 9,  // Spain\r\n      'BR': 11, // Brazil\r\n      'MX': 10, // Mexico\r\n      'JP': 10, // Japan\r\n      'KR': 11, // South Korea\r\n      'CN': 11, // China\r\n      'RU': 10, // Russia\r\n      'ZA': 9,  // South Africa\r\n      'NG': 10, // Nigeria\r\n      'EG': 10, // Egypt\r\n      'SA': 9,  // Saudi Arabia\r\n      'AE': 9,  // UAE\r\n      'default': 10\r\n    };\r\n    return phoneLengths[countryCode] || phoneLengths.default;\r\n  }\r\n}\r\n","<ion-content class=\"ion-padding\">\r\n  <div class=\"pana-admin-title\">\r\n    <h1>PANA ADMIN</h1>\r\n  </div>\r\n\r\n  <div class=\"content-container\">\r\n    <ion-slides pager=\"true\" [options]=\"slideOpts\">\r\n      <ion-slide>\r\n        <ion-img src=\"../assets/imgs/main.svg\"></ion-img>\r\n      </ion-slide>\r\n      <ion-slide>\r\n        <ion-img src=\"../assets/imgs/main1.svg\"></ion-img>\r\n      </ion-slide>\r\n      <ion-slide>\r\n        <ion-img src=\"../assets/imgs/main2.svg\"></ion-img>\r\n      </ion-slide>\r\n    </ion-slides>\r\n\r\n    <form [formGroup]=\"form\" class=\"modern-form\">\r\n      <ion-item>\r\n        <ion-button class=\"country-code-btn\" fill=\"clear\" (click)=\"openCountrySearchModal()\">\r\n          <ion-icon name=\"globe-outline\"></ion-icon>\r\n          {{ CountryCode || defaultCountryCode }}\r\n        </ion-button>\r\n        <div id=\"sign-in-button\"></div>\r\n        <ion-input\r\n          formControlName=\"phone\"\r\n          placeholder=\"Mobile Number\"\r\n          type=\"tel\"\r\n          clearInput\r\n          [attr.maxlength]=\"maxPhoneLength\"\r\n          (ionFocus)=\"Show()\"\r\n          (ionBlur)=\"Hide()\"\r\n          class=\"phone-input\">\r\n        </ion-input>\r\n      </ion-item>\r\n      <ion-text class=\"error\" *ngIf=\"!form.get('phone').valid && form.get('phone').touched\">\r\n        <p *ngIf=\"form.get('phone').hasError('required')\">\r\n          Please enter the Mobile Number\r\n        </p>\r\n        <p *ngIf=\"form.get('phone').hasError('minlength') && !form.get('phone').hasError('required')\">\r\n          Please enter a valid Mobile Number\r\n        </p>\r\n      </ion-text>\r\n      <ion-button expand=\"block\" type=\"submit\" \r\n        [disabled]=\"!form.valid || !CountryCode\" \r\n        (click)=\"signIn()\"\r\n        class=\"submit-button\">\r\n        <span *ngIf=\"!approve2\">\r\n          <ion-icon name=\"log-in-outline\"></ion-icon>\r\n          Continue\r\n        </span>\r\n        <ion-spinner *ngIf=\"approve2\" name=\"crescent\"></ion-spinner>\r\n      </ion-button>\r\n    </form>\r\n  </div>\r\n</ion-content>\r\n\r\n<ion-footer>\r\n  <!-- Add this at the end of your template -->\r\n  <div id=\"recaptcha-container\"></div>\r\n</ion-footer>","import { Injectable } from '@angular/core';\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { StatusBar } from '@capacitor/status-bar';\r\nimport { SplashScreen } from '@capacitor/splash-screen';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlatformService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Check if running on a native platform (iOS/Android)\r\n   */\r\n  isNative(): boolean {\r\n    return Capacitor.isNativePlatform();\r\n  }\r\n\r\n  /**\r\n   * Check if running on web platform\r\n   */\r\n  isWeb(): boolean {\r\n    return Capacitor.getPlatform() === 'web';\r\n  }\r\n\r\n  /**\r\n   * Safely set StatusBar overlay\r\n   */\r\n  async setStatusBarOverlay(overlay: boolean): Promise<void> {\r\n    if (this.isNative()) {\r\n      await StatusBar.setOverlaysWebView({ overlay });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Safely hide splash screen\r\n   */\r\n  async hideSplashScreen(): Promise<void> {\r\n    if (this.isNative()) {\r\n      await SplashScreen.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current platform name\r\n   */\r\n  getPlatform(): string {\r\n    return Capacitor.getPlatform();\r\n  }\r\n}","/// <reference types=\"@capacitor/cli\" />\nexport {};\n","import { registerPlugin } from '@capacitor/core';\nconst SplashScreen = registerPlugin('SplashScreen', {\n    web: () => import('./web').then(m => new m.SplashScreenWeb()),\n});\nexport * from './definitions';\nexport { SplashScreen };\n"],"names":["FormControl","FormGroup","Validators","OtpComponent","environment","RecaptchaVerifier","CountrySearchModalComponent","i0","LoginPage","constructor","modalCtrl","auth","router","nav","authY","avatar","overlay","alertController","platform","platformService","CountryJson","initialSlide","speed","autoplay","ngOnInit","form","phone","validators","required","minLength","maxLength","filteredCountries","detectCountry","recaptchaVerifier","response","signIn","initializeBackButtonCustomHandler","ngAfterViewInit","setTimeout","initializeRecaptcha","element","document","getElementById","recaptcha","error","console","HideSplash","hideSplashScreen","openCountrySearchModal","modal","create","component","present","data","onWillDismiss","CountryCode","dialCode","numberT","filterCountries","event","searchTerm","target","value","toLowerCase","filter","country","name","includes","countryCodeChange","$event","detail","toString","Show","setStatusBarOverlay","Hide","valid","markAllAsTouched","log","showLoader","fullPhoneNumber","confirmationResult","signInWithPhoneNumber","storedOTP","localStorage","getItem","hideLoader","options","componentProps","defaultOtp","countryCode","swipeToClose","onAuthStateChanged","user","email","navigateByUrl","approve2","e","code","defaultNumbers","randomDefaultNumber","Math","floor","random","length","controls","setValue","setItem","showAlert","message","JSON","stringify","backButtonSubscription","backButton","subscribeWithPriority","handleBackButton","showExitConfirmation","alert","header","buttons","text","role","handler","navigator","exitApp","browserLocale","language","split","find","c","isoCode","toUpperCase","maxPhoneLength","getPhoneMaxLength","fetch","json","country_calling_code","startsWith","country_code","updatePhoneValidation","Error","get","setValidators","updateValueAndValidity","phoneLengths","default","selectors","decls","vars","consts","template","ctx","Capacitor","StatusBar","SplashScreen","PlatformService","isNative","isNativePlatform","isWeb","getPlatform","setOverlaysWebView","hide","factory","providedIn","registerPlugin","web","then","m","SplashScreenWeb"],"sourceRoot":"webpack:///","x_google_ignoreList":[5,6]}